name: Publish Package

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (x.y.z)'
        required: true
        default: '0.1.0'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      run: |
        if [[ ! ${{ github.event.inputs.version || github.ref_name }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "::error::Invalid version format"
          exit 1
        fi

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements-dev.txt'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools_scm check-wheel-contents

    - name: Build package
      run: python -m build
      env:
        SETUPTOOLS_SCM_PRETEND_VERSION: ${{ github.event.inputs.version || github.ref_name }}

    - name: Verify wheel contents
      run: |
        echo "=== Package Contents ==="
        wheel_path="dist/datastruct_kit-${{ github.event.inputs.version || github.ref_name }}-py3-none-any.whl"
        python -c "
        import zipfile, sys
        try:
            with zipfile.ZipFile('$wheel_path') as z:
                [print(f) for f in sorted(z.namelist())]
            print('\n✅ Wheel structure verified')
        except Exception as e:
            print(f'::error::Wheel verification failed: {e}')
            sys.exit(1)
        "

    - name: Strict validation
      run: |
        wheel_path="dist/datastruct_kit-${{ github.event.inputs.version || github.ref_name }}-py3-none-any.whl"
        python -c "
        import zipfile, sys
        with zipfile.ZipFile('$wheel_path') as z:
            forbidden = ['tests/', 'examples/']
            bad = [f for f in z.namelist() if any(x in f for x in forbidden)]
            if bad:
                print('::error::Found excluded files:')
                [print(f' - {f}') for f in bad]
                sys.exit(1)
        print('✅ No excluded files found')
        "

    - name: Verify package
      run: |
        twine check dist/*
        check-wheel-contents dist/*.whl --ignore W002,W005,W009
        ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verify-metadata: true
        print-hash: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution-packages
        path: dist/*